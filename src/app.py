"""App."""

import altair as alt  # type: ignore
import streamlit as st  # type: ignore

from penn_chime.presentation import (
    build_download_link,
    display_header,
    display_sidebar,
    draw_census_table,
    draw_projected_admissions_table,
    draw_beds_table,
    draw_raw_sir_simulation_table,
    hide_menu_style,
    show_additional_projections,
    show_more_info_about_this_tool,
    write_definitions,
    write_footer,
    build_data_and_params,
    display_how_to_use
)
from penn_chime.settings import DEFAULTS
from penn_chime.models import SimSirModel
from penn_chime.charts import (
    additional_projections_chart,
    admitted_patients_chart,
    new_admissions_chart,
    covid_beds_chart,
    chart_descriptions,
    bed_chart_descriptions,
)
from penn_chime.utils import (
    dataframe_to_base64,
    calc_offset,
    shift_truncate_tables,
)
from penn_chime.hc_param_import_export import param_download_widget

# This is somewhat dangerous:
# Hide the main menu with "Rerun", "run on Save", "clear cache", and "record a screencast"
# This should not be hidden in prod, but removed
# In dev, this should be shown
st.markdown(hide_menu_style, unsafe_allow_html=True)

p = display_sidebar(st, DEFAULTS)
m = SimSirModel(p)
# Calculate offset.
# p = display_sidebar(st, p)
display_how_to_use(st)

display_header(st, m, p)


if st.checkbox("Show more info about this tool"):
    notes = "The total size of the susceptible population will be the entire catchment area"
    show_more_info_about_this_tool(st=st, model=m, parameters=p, defaults=DEFAULTS, notes=notes)

off = calc_offset(m.census_df, p)
st.markdown(f"Calculated Days from First Admission to COVID-19 Hospital Census Date: {off}") 
selected_offset = st.number_input(
    "Days from First Hospital Admission to COVID-19 Hospital Census Date, Manual Override",
    value = off if p.selected_offset == -1 else p.selected_offset)
p.selected_offset = selected_offset
m = shift_truncate_tables(m, p, selected_offset)

st.subheader("New Hospital Admissions")
st.markdown("Projected number of **daily** COVID-19 admissions")


# st.dataframe(m.admits_df) #######
new_admit_chart_dash, new_admit_chart = new_admissions_chart(alt, m.admits_df, parameters=p)
st.altair_chart(
    new_admit_chart_dash,
    use_container_width=True,
)
suf = {"total": " COVID", "icu": " COVID", "ventilators": ""}
st.markdown(chart_descriptions(new_admit_chart, p.patient_chart_desc))
if st.checkbox("Show Projected Admissions in tabular form"):
    if st.checkbox("Show Daily Counts"):
        draw_projected_admissions_table(st, p, m.admits_df, p.labels, as_date=p.as_date, daily_count=True)
    else:
        draw_projected_admissions_table(st, p, m.admits_df, p.labels, as_date=p.as_date, daily_count=False)
    build_download_link(st,
        filename="projected_admissions.csv",
        df=m.admits_df,
        parameters=p
    )
st.subheader("Hospital Census")
st.markdown(
    "Projected **census** of COVID-19 patients, accounting for arrivals and discharges"
)
# st.dataframe(m.census_df)#########
census_chart_dash, census_chart = admitted_patients_chart(alt=alt, census=m.census_df, parameters=p)
st.altair_chart(
    census_chart_dash,
    use_container_width=True,
)

st.markdown(chart_descriptions(census_chart, p.patient_chart_desc))
if st.checkbox("Show Projected Census in tabular form"):
    if st.checkbox("Show Daily Census Counts"):
        draw_census_table(st, p, m.census_df, p.labels, as_date=p.as_date, daily_count=True)
    else:
        draw_census_table(st, p, m.census_df, p.labels, as_date=p.as_date, daily_count=False)
    build_download_link(st,
        filename="projected_census.csv",
        df=m.census_df,
        parameters=p
    )

st.subheader("COVID-19 Capacity")
st.markdown(
    "Projected **number** of available COVID-19 beds, accounting for admits and discharges"
)  
# st.dataframe(m.beds_df)##########
beds_chart_dash, beds_chart = covid_beds_chart(alt=alt, census=m.beds_df, parameters=p, st=st)
st.altair_chart(beds_chart_dash, use_container_width=True)
st.markdown(bed_chart_descriptions(beds_chart, p.bed_chart_desc))
if st.checkbox("Show Projected Available COVID-19 Beds in tabular form"):
    if st.checkbox("Show Daily Available Bed Counts"):
        draw_beds_table(st, p, m.beds_df, p.labels, as_date=p.as_date, daily_count=True)
    else:
        draw_beds_table(st, p, m.beds_df, p.labels, as_date=p.as_date, daily_count=False)
    build_download_link(st,
        filename="projected_beds.csv",
        df=m.beds_df,
        parameters=p
    )

st.markdown(
    """**Click the checkbox below to view additional data generated by this simulation**"""
)
if st.checkbox("Show Additional Projections"):
    show_additional_projections(
        st, alt, additional_projections_chart, model=m, parameters=p
    )
    if st.checkbox("Show Raw SIR Simulation Data"):
        draw_raw_sir_simulation_table(st, model=m, parameters=p)


st.header("Export Full Data and Parameters")
df = build_data_and_params(projection_admits = m.admits_df, 
                           census_df = m.census_df,
                           beds_df= m.beds_df, 
                           model = m, 
                           parameters = p)

if st.checkbox("Show full data and parameters to be exported"):
    st.dataframe(df)

if p.author == "Jane Doe" or p.scenario == "COVID Model":
    st.markdown("""
    **Enter a unique author name and scenario name to enable downloading.**""")
else:
    filename = "Data" + "_" + p.author + "_" + p.scenario + "_" + df.loc[0, "Date"] + ".csv"
    csv = dataframe_to_base64(df)
    st.markdown("""
            <a download="{filename}" href="data:text/plain;base64,{csv}">Download full table as CSV</a>
    """.format(csv=csv,filename=filename), unsafe_allow_html=True)

write_definitions(st)
write_footer(st)

param_download_widget(
    st,
    p, 
    as_date=p.as_date, 
    max_y_axis_set=p.max_y_axis_set, 
    max_y_axis=p.max_y_axis
)